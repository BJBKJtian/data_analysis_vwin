前言：
pd.crosstab(行,列,margins=True, [值, aggfunc='mean']) # 展示分类与分类数据，默认 计数

df[['x1','x2']].groupby('x1').agg('sum') #展示分类与数值数据

pd.pivot_table(数据,index=[行方向分类],values=[显示的值],columns=[列方向分类],aggfunc='mean',margins=True) # 展示分类与数值数据
-- 交叉表比groupby多一个汇总功能
-- 交叉表默认显示的汇总平均数



一、groupby() 函数
1)基本语句
grouped = df.groupby('Year')
for name,group in grouped:
    print (name)
    print (group)
    
grouped = df.groupby([‘key1’,’key2’])
for key1,key2,group in grouped:
    print (key1,key2)
    print (group)

2）选择一个分组
df.groupby('Year').get_group(2014) #得到2014年的分组数据

1.应用agg()
可搭配函数：max,min,sum,mean,median,std,var,count
data.groupby("company").agg('mean')
data.groupby('company').agg({'salary':'median','age':'mean'}) # 对不同列应用不同的函数

2.应用apply()
df.groupby('A').apply(lambda x: (x['C']-x['B']).mean())

3.应用transform()
在原数据集中新增一列avg_salary，代表员工所在的公司的平均薪水（相同公司的员工具有一样的平均薪水）
data['avg_salary'] = data.groupby('company')['salary'].transform('mean')
    等价于
    avg_salary_dict = data.groupby('company')['salary'].mean().to_dict()
    data['avg_salary'] = data['company'].map(avg_salary_dict)


二、透视表pivot_table 
pd.pivot_table(data, values=None, index=None, columns=None,aggfunc='mean',fill_value=None, margins=False)
# 每个pivot_table必须拥有一个index
# 未设置aggfunc时，它默认aggfunc='mean'计算均值
# fill_value填充空值,margins=True进行汇总

1)按照对手、主客场的顺序进行分类
pd.pivot_table(df,index=['对手','主客场'])

2）Values可以对需要的计算数据进行筛选
需要在主客场和不同胜负情况下的得分、篮板与助攻三项数据：
pd.pivot_table(df,index=[u'主客场',u'胜负'],values=[u'得分',u'助攻',u'篮板'])

3）aggfunc参数可以设置我们对数据聚合时进行的函数操作
需要在主客场和不同胜负情况下的得分、篮板与助攻三项数据的求和以及均值：
pd.pivot_table(df,index=[u'主客场',u'胜负'],values=[u'得分',u'助攻',u'篮板'],aggfunc=[np.sum,np.mean])
pd.pivot_table(df,index=[u'对手',u'胜负'],columns=[u'主客场'],values=[u'得分',u'助攻'],aggfunc={u'得分':np.mean, u'助攻':[min, max, np.mean]},fill_value=0)

4）Columns类似Index可以设置列层次字段，它不是一个必要参数，作为一种分割数据的可选方式
pd.pivot_table(df,index=[u'主客场'],columns=[u'对手'],values=[u'得分'],aggfunc=[np.sum],fill_value=0,margins=1)


三、交叉表crosstab 
pd.crosstab(values=None, index=None, columns=None,aggfunc='mean', margins=False)
# pd.crosstab(行,列，[值],margins=True,[aggfunc='mean'])
-- 行、列均可使用多变量
-- 不输入值(values)，默认计数
-- margins=True，加入汇总情况
-- aggfunc,对值采用什么聚合函数


pd.crosstab(index=[data['cut'], data['clarity']], columns=diamonds['color'],  values=data['price'], aggfunc=np.mean,margins=True).fillna(0)



