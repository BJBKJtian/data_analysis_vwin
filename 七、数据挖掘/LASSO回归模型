class Lasso_regression:
    '''
    X:自变量的数据集
    Y:因变量的数据集
    test_size:测试集所占的比例
    '''
    # from sklearn.linear_model import Lasso,LassoCV
    def __init__(self,X,Y,test_size=0.2):
        self.X=X
        self.Y=Y
        self.test_size=test_size
        # from sklearn.model_selection import train_test_split
        self.x_train,self.x_test,self.y_train,self.y_test = train_test_split(self.X,self.Y,test_size=self.test_size) # 切分数据集
        
    def drawing_plot(self,lambdas = np.logspace(-5,2,200)):
        '''lambdas = np.logspace(-5,2,200) :从10^-5 到 10^2 之间生成200个等比数'''
        # 绘制 lambda和对应回归系数的折线图
        lasso_coff = []
        for i in lambdas:
            lasso= Lasso(alpha=i,normalize=True,max_iter=10000)
            lasso.fit(self.x_train,self.y_train)
            lasso_coff.append(lasso.coef_)

        plt.figure(dpi=150)
        plt.style.use('ggplot')
        plt.plot(lambdas,lasso_coff)
        plt.xscale('log')   # 对x轴做对数处理
        plt.xlabel('Log10(lambda)')
        plt.ylabel('coef')
        plt.show()
        
    def cross_validation(self,lambdas,cv=10):
        '''
        lambdas:需要交叉验证的lambda系数值们
        cv=10:默认进行10折交叉验证
        '''
        global best_lambda
        # 对于 lambdas 中的每一个值，都执行10次交叉验证
        lasso_cv = LassoCV(alphas=lambdas,normalize=True,cv=cv,max_iter=10000)
        lasso_cv.fit(self.x_train,self.y_train)
        best_lambda = lasso_cv.alpha_ 
        print('最佳的lambda值：\n',best_lambda)
        
    def lasso_predict(self):
        global best_lambda
        # 模型的预测
        lasso = Lasso(alpha=best_lambda,normalize=True,max_iter=10000)
        lasso.fit(self.x_train,self.y_train)
        coefs = pd.Series(index = ['Intercept']+ self.x_train.columns.tolist(),
                          data = [lasso.intercept_]+lasso.coef_.tolist())
        print('回归系数为：\n',coefs)

        # from sklearn.metrics import mean_squared_error
        y_predict = lasso.predict(self.x_test)
        MSE = mean_squared_error(self.y_test,y_predict)
        print('模型的均方误差MSE为：','%.3f'%MSE)
        
        
        
        
        
if __name__=='__main__':
    lasso= Lasso_regression(X=X,Y=data['Y'])
    lasso.drawing_plot()
    # lasso.cross_validation(lambdas=np.logspace(-5,2,200))
    # lasso.lasso_predict()
