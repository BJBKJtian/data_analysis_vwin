def two_factor_ANOVA_NOinteraction(data=None,alpha=0.05,row_data=None,type_col1=None,type_col2=None,value_col=None):
    '''
    注：要求交叉表中不存在nan数据
    data:已经处理好的数据（与row_data二选一）,要求DataFrame格式
    alpha:显著性水平
    row_data：原始数据（与data二选一），要求DataFrame格式
    type_col：当设置row_data时，需设置的分类列,如type_col='gender'
    value_col：当设置row_data时，需设置的数值列
    '''
    if row_data is not None: #当输入的数据为原始数据时
        data=pd.pivot_table(data=row_data,index=type_col1,columns=type_col2,values=value_col)
        print('经过处理后的数据为：\n',data)
        print('*'*40)
        
    #计算所有数据的平均值    
    value_list=[] # 所有的数据值
    for i in range(data.shape[0]):
        value=data.iloc[i].values
        value_list.extend(value)
    total_mean=np.mean(value_list) 
    
    #计算SST
    SST_list=[]
    for i in value_list:
        a=(i-total_mean)**2
        SST_list.append(a)
    SST=sum(SST_list) 
    
    #计算数据的水平个数
    n1=data.shape[0] 
    n2=data.shape[1] 
    
    #计算行方向因素的组间方差
    SSBA_list=[] 
    for i in range(data.shape[0]):
        mean=data.iloc[i].mean()
        a=(mean-total_mean)**2
        SSBA_list.append(a)
    SSBA=sum(SSBA_list)*n2
    
    #计算列方向因素的组间方差
    SSBB_list=[] 
    for i in range(data.shape[1]):
        mean=data.iloc[:,i].mean()
        a=(mean-total_mean)**2
        SSBB_list.append(a)
    SSBB=sum(SSBB_list)*n1
    
    SSA=SST-SSBA-SSBB
    
    MSBA=SSBA/(n1-1)
    MSBB=SSBB/(n2-1)
    MSA=SSA/((n1-1)*(n2-1))
    
    F_value1=MSBA/MSA
    F_value2=MSBB/MSA
    P_value1=st.f.sf(F_value1, dfn=n1-1, dfd=(n1-1)*(n2-1))
    P_value2=st.f.sf(F_value2, dfn=n2-1, dfd=(n1-1)*(n2-1))
    
    factor1=data.index.name
    factor2=data.columns.name
    
    print('方差来源',' '*3,'离差平方和',' '*5,'自由度',' '*3,'均方',' '*3,'F值',' '*3,'P值')
    print(f'{factor1}组间方差',' '*3, '%.2f'%(SSBA),' '*10,n1-1,' '*5,'%.2f'%(MSBA),' '*4,'%.2f'%(F_value1),' '*3,'%.2f'%(P_value1))
    print(f'{factor2}组间方差',' '*3, '%.2f'%(SSBB),' '*10,n2-1,' '*5,'%.2f'%(MSBB),' '*3,'%.2f'%(F_value2),' '*3,'%.2f'%(P_value2))
    print('组内方差',' '*5,'%.2f'%(SSA),' '*11,(n1-1)*(n2-1),' '*5,'%.2f'%(MSA))
    print('总方差',' '*7,'%.2f'%(SST),' '*10,n1*n2-1)
