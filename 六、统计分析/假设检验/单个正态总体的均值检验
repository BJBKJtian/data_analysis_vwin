一、Z检验
要求：总体方差已知

def hypothetical_test_z(mean,assume_mean,n,std,alpha=0.05,alternative='two-sided'):
    import numpy as np
    import scipy.stats as st
    '''
    assume_mean:检验的均值
    std:总体标准差
    alpha:显著性水平   
    alternative:选择检验方式。默认双尾检验；‘left’：左尾检验；‘right’：右尾检验
    '''

    z_value=(mean-assume_mean)/(std/np.sqrt(n))
    
    if alternative=='two-sided': # 计算双尾检验的z值
        z_alpha=st.norm.isf(alpha/2)
        p_value=st.norm.sf(abs(z_value)) * 2
        
    elif alternative=='left': # 计算左尾检验的z值
        z_alpha=st.norm.isf(alpha)
        p_value=st.norm.sf(abs(z_value)) 
        
    else:
        z_alpha=st.norm.isf(alpha)
        p_value=st.norm.sf(abs(z_value))  
    print('在显著性水平为{:.2f}时，对应的z值为{:.3f}'.format(alpha,z_alpha))
    print('检验的z值为{:.3f}，其对应的p值为{:.3f}'.format(z_value,p_value))


二、T检验
要求：方差未知

def hypothetical_test_t(data,assume_mean,alpha=0.05,alternative='two-sided'):
    '''
    data:要检验的数据，需传入pandas格式，如df['x1']
    assume_mean:检验的均值
    alpha:显著性水平   
    alternative:选择检验方式，默认双尾检验。‘left’：左尾检验；‘right’：右尾检验
    '''
    mean=data.mean()
    n=len(data) #计算样本量
    std=data.std()
    
    t_value=(mean-assume_mean)/(std/np.sqrt(n))  # 要检验的t值
    
    if alternative=='two-sided': # 计算双尾检验的t值
        t_alpha=st.t.isf(alpha/2,df=(n-1))
        p_value=st.t.sf(abs(t_value),df=(n-1)) * 2
        
    elif alternative=='left': # 计算左尾检验的t值
        t_alpha=st.t.isf(alpha,df=(n-1))
        p_value=st.t.sf(abs(t_value),df=(n-1))
        
    else:
        t_alpha=st.t.isf(alpha,df=(n-1))
        p_value=st.t.sf(abs(t_value),df=(n-1))
    print('在显著性水平为{:.2f}时，对应的t值为{:.3f}'.format(alpha,t_alpha))
    print('检验的t值为{:.3f}，其对应的p值为{:.3f}'.format(t_value,p_value))




    
