def one_factor_ANOVA(data=None,alpha=0.05,row_data=None,type_col=None,value_col=None):
    '''
    注：需要导入math模块
    data:已经处理好的数据（与row_data二选一）,要求DataFrame格式，横向数据代表不同水平
    alpha:显著性水平
    row_data：原始数据（与data二选一），要求DataFrame格式
    type_col：当row_data=True时，需设置的分类列,如type_col='gender'
    value_col：当row_data=True时，需设置的数值列
    '''
    if row_data is not None: #当输入的数据为原始数据时
        set_type=set(row_data[type_col].values)
        value_list=[]
        for i in set_type:
            c=row_data[[type_col,value_col]].groupby(by=[type_col]).get_group(i)[value_col]
            c.reset_index(inplace=True, drop=True)
            c.name=i
            value_list.append(c)
        data=pd.DataFrame(value_list)
        print('经过处理后的数据为：\n',data)
        print('*'*40)
    
    value_list=[]
    for i in range(data.shape[0]):
        value=data.iloc[i].values
        value_list.extend(value)
    new_list=[x for x in value_list if math.isnan(x) == False] # 所有数据
    total_mean=np.mean(new_list)  #计算所有数据的平均值
    
    num_factor=data.shape[0] #计算所有数据的水平个数
    
    MSB_list=[] #组间方差列表:各组平均值与总平均值
    MSA_list=[]
    n_list=[] #各水平的数据量
    for i in range(data.shape[0]):
        mean=data.iloc[i].mean()
        n=data.iloc[i].count()
        n_list.append(n)
        
        values_list=[x for x in data.iloc[i].values if math.isnan(x) == False] #去除nan
        for i in values_list:
            a=(i-mean)**2
            MSA_list.append(a)
            
        val=n*((mean-total_mean)**2)
        MSB_list.append(val)
        
    SSA=sum(MSA_list) #组内离差平方和
    MSA=SSA/(sum(n_list)-num_factor) #组内均方
    
    SSB=sum(MSB_list) #组间离差平方和
    MSB=SSB/(num_factor-1) #组间均方
    
    SST=SSB+SSA
    
    F_value=MSB/MSA
    P_value=st.f.sf(F_value, dfn=num_factor-1, dfd=sum(n_list)-num_factor)
    
    print('方差来源',' '*3,'离差平方和',' '*3,'自由度',' '*3,'均方',' '*3,'F值',' '*3,'P值')
    print('组间方差',' '*3, '%.2f'%(SSB),' '*10,num_factor-1,' '*5,'%.2f'%(MSB),' '*3,'%.2f'%(F_value),' '*3,'%.2f'%(P_value))
    print('组内方差',' '*3,'%.2f'%(SSA),' '*10,sum(n_list)-num_factor,' '*4,'%.2f'%(MSA))
    print('总方差',' '*5,'%.2f'%(SST),' '*10,sum(n_list)-1)
